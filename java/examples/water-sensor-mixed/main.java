// import net.cell_lang.WaterSensor;


// Wrapper for the class generated by the compiler
class WaterSensor {
  public interface Observer {
    void onStateChange(String newState);
  };

  net.cell_lang.WaterSensor target = new net.cell_lang.WaterSensor();

  public WaterSensor() {
    target.apply();
  }

  public void failedReading() {
    target.setInput(net.cell_lang.WaterSensor.Input.RAW_READING, "nothing");
  }

  public void newReading(boolean value) {
    target.setInput(net.cell_lang.WaterSensor.Input.RAW_READING, value ? "just(true)" : "just(false)");
  }

  public void apply(int elapsedSecs, Observer observer) {
    boolean done;
    target.setElapsedSecs(elapsedSecs);
    do {
      done = target.apply();
      for (net.cell_lang.WaterSensor.Output id : target.changedOutputs()) {
        String value = target.readOutput(id);
        switch (id) {
          case SENSOR_STATE:
            observer.onStateChange(value);
            break;
        }
      }
    } while (!done);
  }
};


class Writer implements WaterSensor.Observer {
  public void onStateChange(String newValue) {
    System.out.println(newValue.toString());
  }
};


class Test {
  public static void main(String[] args) {
    Writer writer = new Writer();
    WaterSensor sensor = new WaterSensor();

    sensor.newReading(false);
    sensor.apply(40, writer);

    sensor.failedReading();
    sensor.apply(10, writer);

    sensor.failedReading();
    sensor.apply(10, writer);

    sensor.failedReading();
    sensor.apply(10, writer);

    sensor.newReading(true);
    sensor.apply(10, writer);

    sensor.newReading(false);
    sensor.apply(50, writer);
  }
}
